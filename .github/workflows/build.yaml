name: build

on:
  workflow_dispatch:
  push:
    branches: 
      - ci/*
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

permissions: 
  contents: write # create releases

jobs:
  metadata:
    name: Extract crate metadata
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - shell: bash
        id: metadata
        run: |
          echo "CRATE_NAME=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].name')" | tee -a $GITHUB_OUTPUT
          echo "CRATE_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')" | tee -a $GITHUB_OUTPUT
    outputs:
      name: ${{ steps.metadata.outputs.CRATE_NAME }}
      version: ${{ steps.metadata.outputs.CRATE_VERSION }}
  
  build:
    name: Build ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    needs: metadata

    strategy:
      matrix:
        job:
          # - { target: aarch64-unknown-linux-gnu   , os: ubuntu-24.04, use-cross: true }
          # - { target: aarch64-unknown-linux-musl  , os: ubuntu-24.04, use-cross: true }
          # - { target: arm-unknown-linux-gnueabihf , os: ubuntu-24.04, use-cross: true }
          # - { target: arm-unknown-linux-musleabihf, os: ubuntu-24.04, use-cross: true }
          - { target: aarch64-apple-darwin        , os: macos-14                      }
          # - { target: x86_64-pc-windows-gnu       , os: windows-2022                  }
          - { target: x86_64-pc-windows-msvc      , os: windows-2022                  }
          # - { target: aarch64-pc-windows-msvc     , os: windows-11-arm                } # not supported for private repos
          - { target: x86_64-unknown-linux-gnu    , os: ubuntu-24.04, use-cross: true }
          - { target: x86_64-unknown-linux-musl   , os: ubuntu-24.04, use-cross: true }
    
    env:
      BUILD_CMD: cargo

    steps:

      - name: Checkout sourcecode
        uses: actions/checkout@v5

      - name: Ensure system deps
        shell: bash
        run: |
          # Prepare for arm and aarch64
          case "${{ matrix.job.target}}" in
            arm-unknown-linux-*)
              sudo apt-get update -y
              sudo apt-get install -y gcc-arm-linux-gnueabihf
              ;;
            aarch64-unknown-linux-*)
              sudo apt-get update -y
              sudo apt-get install -y gcc-aarch64-linux-gnu
              ;;
          esac

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.job.target }}
      
      - name: Install cross
        if: matrix.job.use-cross == true
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Enable cross
        if: matrix.job.use-cross == true
        run: |
          echo "BUILD_CMD=cross" >> $GITHUB_ENV

      - name: Show versions
        shell: bash
        run: |
          gcc --version || true
          rustup -V
          rustc -V
          cargo -V
          
      - name: Build release binary
        shell: bash
        run: |
          $BUILD_CMD build --target ${{ matrix.job.target }} --release
        
      - name: Detect release
        shell: bash
        id: detect_release
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT 
          fi

      - name: Collect artifact
        shell: bash
        id: collect_artifact
        run: |
          IS_WINDOWS=false; case ${{ matrix.job.target }} in
            *-windows-*) IS_WINDOWS=true ;;
          esac

          BIN_DIR="target/${{ matrix.job.target }}/release"
          BIN_EXT=""; if [ "$IS_WINDOWS" = "true" ]; then BIN_EXT=".exe"; fi

          ARTIFACT_PATH="${BIN_DIR}/${{ needs.metadata.outputs.name }}${BIN_EXT}"
          BASE_NAME="${{ needs.metadata.outputs.name }}-${{ needs.metadata.outputs.version }}-${{ matrix.job.target }}"
          
          if [ "${{ steps.detect_release.outputs.is_release }}" = "true" ]; then
            # For release, create archive
            if [ "$IS_WINDOWS" = "true" ]; then
              ZIP_NAME="${BASE_NAME}.zip"
              powershell Compress-Archive -Path "$ARTIFACT_PATH" -DestinationPath "$ZIP_NAME"
              echo "ARTIFACT_FILE=$ZIP_NAME" >> $GITHUB_OUTPUT
            else
              TAR_NAME="${BASE_NAME}.tar.gz"
              tar -czf "$TAR_NAME" -C "$BIN_DIR" "${{ needs.metadata.outputs.name }}"
              echo "ARTIFACT_FILE=$TAR_NAME" >> $GITHUB_OUTPUT
            fi
          else
            # For non-release, just upload the binary
            echo "ARTIFACT_FILE=$ARTIFACT_PATH" >> $GITHUB_OUTPUT
          fi
      
      # If not release, upload to artifact, retention 7 days
      - name: Upload artifact
        if: steps.detect_release.outputs.is_release == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.metadata.outputs.name }}-${{ matrix.job.target }}-${{ needs.metadata.outputs.version }}
          path: ${{ steps.collect_artifact.outputs.ARTIFACT_FILE }}
          retention-days: 7
      
      # If release, upload to release
      - name: Upload to release
        if: steps.detect_release.outputs.is_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.collect_artifact.outputs.ARTIFACT_FILE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}